server {
  listen   <%= @http_port %><%= " default_server" if @default_server %>;
  server_name  <%= @deploy[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log  <%= node[:nginx][:log_dir] %>/<%= @deploy[:domains].first %>.access.log<%=" #{node[:nginx][:log_format_name]}" unless node[:nginx][:log_format_name].nil? %>;

  root   <%= @deploy[:absolute_document_root] %>;

  location / {
    if ($maintenance) {
      return 503;
      break;
    }
    <% if @deploy[:nginx] && @deploy[:nginx][:default_location_includes] %>
    include <%= @deploy[:nginx][:default_location_includes] %>;
    <% end %>

  <% if @try_static_files %>
    try_files  $uri $uri/index.html $uri.html @app_<%= @application_name %>;
  }
  location @app_<%= @application_name %> {
  <% end %>
    # Turn on the passenger Nginx helper for this location.
    passenger_enabled on;

    # These don't seem to work in stack, which is in the http {} block
    passenger_set_header HTTP_X_FORWARDED_FOR   $proxy_add_x_forwarded_for;
    passenger_set_header HTTP_X_REAL_IP         $remote_addr;
    passenger_set_header HTTP_HOST              $http_host;
    passenger_set_header HTTP_X_FORWARDED_PROTO $scheme;
    # https://docs.newrelic.com/docs/apm/other-features/request-queueing/request-queue-server-configuration-examples#nginx
    passenger_set_header HTTP_X_REQUEST_START "t=${msec}";

    # Rails 3.0 apps that use rack-ssl use SERVER_PORT to generate a https
    # URL. Since internally nginx runs on a different port, the generated
    # URL looked like this: https://host:81/ instead of https://host/
    # By setting SERVER_PORT this is avoided.
    passenger_set_header SERVER_PORT            80;

    #
    # Define the rack/rails application environment.
    #
    rack_env <%= @rails_env %>;
  }


  error_page 503 /maintenance.html;
  location = /maintenance.html {
    root <%= node[:nginx][:prefix_dir] %>/html;
  }

  location /nginx_status {
    stub_status on;
    access_log off;
    <% @status[:allow].each do |source| %>
    allow <%= source %>;
    <% end %>
    deny all;
  }

  include <%= node[:nginx][:dir] %>/shared_server.conf.d/*.conf;
  include <%= node[:nginx][:dir] %>/http_server.conf.d/*.conf;
}

<% if @deploy[:ssl_support] %>
server {
  listen   <%= @ssl_port %><%= " default_server" if @default_server %>;
  <% if node[:nginx][:use_hsts] %>
  add_header Strict-Transport-Security "max-age=31536000;"
  <% end -%>
  server_name  <%= @deploy[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log  <%= node[:nginx][:log_dir] %>/<%= @deploy[:domains].first %>-ssl.access.log<%=" #{node[:nginx][:log_format_name]}" unless node[:nginx][:log_format_name].nil? %>;

  ssl on;
  ssl_dhparam <%= @dh_key %>;
  ssl_certificate /etc/nginx/ssl/<%= @deploy[:domains].first %>.crt;
  ssl_certificate_key /etc/nginx/ssl/<%= @deploy[:domains].first %>.key;
  <% if @deploy[:ssl_certificate_ca] -%>
  ssl_client_certificate /etc/nginx/ssl/<%= @deploy[:domains].first %>.ca;
  <% end -%>

  <% @deploy.fetch(:nginx, {}).fetch(:extra_ssl_server_options, {}).each do |config_key, value| %>
    <%= config_key %> <%= value %>;
  <% end %>

  root   <%= @deploy[:absolute_document_root] %>;


  location / {
    if ($maintenance) {
      return 503;
      break;
    }
  <% if @try_static_files %>
    try_files  $uri $uri/index.html $uri.html @app_<%= @application_name %>_ssl;
  }
  location @app_<%= @application_name %>_ssl {
  <% end %>
    # Turn on the passenger Nginx helper for this location.
    passenger_enabled on;

    # These don't seem to work in stack, which is in the http {} block
    passenger_set_header HTTP_X_FORWARDED_FOR   $proxy_add_x_forwarded_for;
    passenger_set_header HTTP_X_REAL_IP         $remote_addr;
    passenger_set_header HTTP_HOST              $http_host;
    passenger_set_header HTTP_X_FORWARDED_PROTO $scheme;
    # https://docs.newrelic.com/docs/apm/other-features/request-queueing/request-queue-server-configuration-examples#nginx
    passenger_set_header HTTP_X_REQUEST_START "t=${msec}";
    passenger_set_header X-SSL-Protocol $ssl_protocol;

    # Rails 3.0 apps that use rack-ssl use SERVER_PORT to generate a https
    # URL. Since internally nginx runs on a different port, the generated
    # URL looked like this: https://host:81/ instead of https://host/
    # By setting SERVER_PORT this is avoided.
    passenger_set_header SERVER_PORT            443;

    #
    # Define the rack/rails application environment.
    #
    rack_env <%= @rails_env %>;
  }

  error_page 503 /maintenance.html;
  location = /maintenance.html {
    root <%= node[:nginx][:prefix_dir] %>/html;
  }

  include <%= node[:nginx][:dir] %>/shared_server.conf.d/*.conf;
  include <%= node[:nginx][:dir] %>/ssl_server.conf.d/*.conf;
}
<% end %>
